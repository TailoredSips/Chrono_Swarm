stages:
  - build
  - deploy

variables:
  CI_REGISTRY_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH

# --- Template for building each agent ---
.build_agent_template: &build_agent
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - echo "Building agent in $AGENT_PATH..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/$AGENT_PATH:$CI_COMMIT_SHA ./services/$AGENT_PATH
    - docker push $CI_REGISTRY_IMAGE/$AGENT_PATH:$CI_COMMIT_SHA

# --- Build each agent in parallel ---
build_orchestrator:
  <<: *build_agent
  variables:
    AGENT_PATH: orchestrator

build_terminal:
  <<: *build_agent
  variables:
    AGENT_PATH: terminal

build_filesystem:
  <<: *build_agent
  variables:
    AGENT_PATH: filesystem

# ... Add all other required build jobs here ...


# --- Deployment Stage ---
deploy_swarm:
  stage: deploy
  image: alpine:latest
  before_script:
    # Install necessary tools
    - apk add --no-cache openssh-client rsync bash
    
    # Set up SSH agent with the private key
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    
    # Disable strict host key checking for this automated job
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  script:
    - echo "Deploying the swarm to $DEPLOY_HOST..."

    # Step 1: Securely copy the docker-compose file to the server.
    # This ensures the server always has the latest version-controlled configuration.
    - rsync -avz ./docker-compose.yml $DEPLOY_USER@$DEPLOY_HOST:/home/$DEPLOY_USER/docker-compose.yml

    # Step 2: SSH into the server and execute the deployment sequence.
    - ssh $DEPLOY_USER@$DEPLOY_HOST "
        set -e # Exit immediately if a command exits with a non-zero status.
        
        echo '==> Logging into GitLab Registry...'
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        
        echo '==> Pulling latest images defined in docker-compose.yml...'
        docker-compose -f /home/$DEPLOY_USER/docker-compose.yml pull
        
        echo '==> Restarting services with new images...'
        docker-compose -f /home/$DEPLOY_USER/docker-compose.yml up -d --remove-orphans
        
        echo '==> Pruning old, unused Docker images...'
        docker image prune -af

        echo '==> Deployment complete.'
      "
  # This job should only run on pushes to the main branch
  only:
    - main